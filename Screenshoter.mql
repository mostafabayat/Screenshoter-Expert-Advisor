#property description "\"period\" parameter determines how often to take a screenshot, set to 0 to disable timer and work with button manually."
#property description "if you want to disable screenshot from marketwatch symboles set its parameter to false, screen shot from all market watch symboles may be interruptive!"
#property description "because for every symboles that its chart isn't open, EA open a chart and then close it."

#define        WIDTH  1366
#define        HEIGHT 768
input int      period=3600;
input bool     allMarketWatch=false;

void configChart(long chartId) {
  ChartSetInteger(chartId,CHART_SCALE,0,3);
  ChartNavigate(chartId,CHART_END,0);
  ChartSetInteger(chartId,CHART_AUTOSCROLL,false);
  ChartSetInteger(chartId,CHART_SHIFT,false);
  ChartSetInteger(chartId,CHART_MODE,CHART_CANDLES);
}

void screenshotFromChart(long chartId, string symbolName) {
  int length = StringLen(symbolName);
  string hexOfSymbol;
  string symbol;
  for(int i = 0 ; i< length; i++) {
    symbol= StringSubstr(symbolName,i,1);
    ushort b = StringGetCharacter(symbol,0);
    hexOfSymbol +=""+ StringFormat("%x", b);
  }
  if(ChartScreenShot(chartId,hexOfSymbol + ".jpg",WIDTH,HEIGHT)) {
    Print("We've saved the screenshot of ", symbolName, " ID: ", chartId);
    if(!SendFTP(hexOfSymbol + ".jpg")) {
       Print("error ",GetLastError());
    }
  }
}

bool isOpened(string &openedCharts[], int numberOfOpneCharts, string symbolName){
  for (int i = 0; i < numberOfOpneCharts; i++) {
    if (symbolName == openedCharts[i]) return true;
  }
  return false;
}

int OnInit() {
   Print("Preparation of the Expert Advisor is completed");
   string name = "screenshot";
   ObjectCreate(ChartID(),name,OBJ_BUTTON,0,0,0);
   ObjectSetInteger(ChartID(),name,OBJPROP_XDISTANCE,0);
   ObjectSetInteger(ChartID(),name,OBJPROP_YDISTANCE,20);
   ObjectSetInteger(ChartID(),name,OBJPROP_XSIZE,100);
   ObjectSetInteger(ChartID(),name,OBJPROP_YSIZE,28);
   ObjectSetString(ChartID(),name,OBJPROP_TEXT,name);
   ObjectSetString(ChartID(),name,OBJPROP_FONT,"Arial");
   ObjectSetInteger(ChartID(),name,OBJPROP_FONTSIZE,10);
   ObjectSetInteger(ChartID(),name,OBJPROP_COLOR,clrBlack);
   ObjectSetInteger(ChartID(),name,OBJPROP_BGCOLOR,C'236,233,216');
   ObjectSetInteger(ChartID(),name,OBJPROP_BACK,false);
   ChartRedraw(ChartID());
   if (period != 0) EventSetTimer(period);
   return(INIT_SUCCEEDED);
  }

void OnDeinit(const int reason) {
   if (period != 0) EventKillTimer();
   ObjectDelete(ChartID(), "screenshot");
  }

void OnTimer() {
   long currChart=ChartFirst();
   int i=0,limit=100;
   string openedCharts[100];
   while(i<limit) {
     openedCharts[i] = ChartSymbol(currChart);
     screenshotFromChart(currChart, ChartSymbol(currChart));
     currChart = ChartNext(currChart);
     if(currChart<0) break;
     i++;
   }
   if (allMarketWatch) {
     int numberOfOpneCharts = i + 1;
     long chartId;
     string symbolName;
     if (numberOfOpneCharts >= 100) return;
     for(int j=0;j<SymbolsTotal(1);j++) {
       symbolName = SymbolName(j,1);
       if (isOpened(openedCharts, numberOfOpneCharts, symbolName)) continue;
       chartId = ChartOpen(symbolName,0);
       configChart(chartId);
       Sleep(1000);
       screenshotFromChart(chartId, symbolName);
       ChartClose(chartId);
     }
   }
}

void OnChartEvent(const int id, const long &lparam, const double &dparam, const string &sparam) {
   if(id==CHARTEVENT_OBJECT_CLICK) {
      Print("The mouse has been clicked on the object with name '"+sparam+"'");
      screenshotFromChart(ChartID(), _Symbol);
   }   
}
